{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"what",
				"whatToDoNow"
			],
			[
				"stat",
				"stationSelected"
			],
			[
				"station",
				"stationSelected"
			],
			[
				"data",
				"dataResult"
			],
			[
				"waht",
				"whatToDo"
			],
			[
				"resul",
				"resultAtStation"
			],
			[
				"aver",
				"averageTraffic"
			],
			[
				"stt",
				"stationSelected"
			],
			[
				"sta",
				"stationResult"
			],
			[
				"avera",
				"averageTraffic"
			],
			[
				"curre",
				"currentTraffic"
			],
			[
				"wh",
				"whatToDo"
			],
			[
				"ave",
				"averageLevel"
			],
			[
				"findt",
				"findthetime"
			],
			[
				"find",
				"findthetime"
			],
			[
				"get",
				"getTime"
			],
			[
				"time",
				"timeConverter"
			],
			[
				"json",
				"jsonQueryStations"
			],
			[
				"geol",
				"geolocationSvc"
			],
			[
				"location",
				"locationResults"
			],
			[
				"locatio",
				"locationResults"
			],
			[
				"loca",
				"locationResults"
			],
			[
				"$s",
				"$scope\tAngularJS"
			],
			[
				"last",
				"lastPartial"
			],
			[
				"ur",
				"urlMaker"
			],
			[
				"l",
				"left"
			],
			[
				"radius",
				"radiusSettings"
			],
			[
				"locat",
				"locationFactory"
			],
			[
				"googlemap",
				"googleMapApiUrlLeft"
			],
			[
				"goo",
				"googleMapApiUrlComplete"
			],
			[
				"goog",
				"googleMapApiUrlLeft"
			],
			[
				"url",
				"urlGoogleQueryComplete"
			],
			[
				"map",
				"map_key"
			],
			[
				"radiu",
				"radiusSettings"
			],
			[
				"gogle",
				"googleMapApiUrl"
			],
			[
				"$http",
				"$http\tAngularJS"
			],
			[
				"rad",
				"radiusSettings"
			],
			[
				"ma",
				"googleMapApiUrl"
			],
			[
				"lo",
				"locationFactory"
			],
			[
				"google",
				"googleApiData"
			],
			[
				"st",
				"stationsUrl"
			],
			[
				"bl",
				"blogapp"
			],
			[
				"html",
				"html5\tSimple HTML5 Boilerplate"
			],
			[
				"back",
				"background-color"
			],
			[
				"http",
				"$http\tAngularJS"
			],
			[
				"ht",
				"htmlGenerator"
			],
			[
				"use",
				"userOnline"
			],
			[
				"usern",
				"userNames"
			],
			[
				"u",
				"userID"
			],
			[
				"user",
				"userUrl"
			],
			[
				"statu",
				"statusTwitch"
			],
			[
				"twit",
				"twitchData"
			],
			[
				"offli",
				"offlineData"
			],
			[
				"off",
				"offlineData"
			],
			[
				"fu",
				"function"
			],
			[
				"Post",
				"PostForm"
			],
			[
				"Pos",
				"PostAdmin"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.js",
			"settings":
			{
				"buffer_size": 436,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 768,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "css/stylez.css",
			"settings":
			{
				"buffer_size": 83,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "var mainApp = angular.module('mainApp', []);\n\n\nmainApp.factory('jsonQueryStations', ['$filter', '$http', function($filter,$http){\n  var station = {};\n  return {\n    stationData: function(){\n    return $http.get('tubeUsers.json')\n      .then(function(results){\n        var currentStation = \"waterloo\";\n        return {station: $filter('filter')(results.data, {Station: currentStation })[0]};\n  });\n      return {\n        station: station\n      }\n  }\n}\n}]);\n\nmainApp.factory('timeConverter', [function(){\n  var currentTime = \"\";\n  var getTimeConverter = function findTimeStringIt (){\n            var hour = new Date().getHours();\n        var minute = new Date().getMinutes();\n        if (minute<16){\n          var minuteLower = 0;\n          var minuteUpper = 15;\n          if (minuteLower === 0){\n            var currentTime = hour.toString() + minuteLower.toString() + \"0-\" + hour.toString() + minuteUpper.toString();\n            return currentTime;\n          } else {\n          var currentTime = hour.toString() + minuteLower.toString() + \"-\" + hour.toString() + minuteUpper.toString();\n          return currentTime;\n          }\n        } else if (minute>15 && minute<31){\n          var minuteLower = 16;\n          var minuteUpper = 30;\n          var currentTime = hour.toString() + minuteLower.toString() + \"-\" + hour.toString() + minuteUpper.toString();\n          return currentTime;\n        } else if (minute>30 && minute<46){\n          var minuteLower = 31;\n          var minuteUpper = 45;\n          var currentTime = hour.toString() + minuteLower.toString() + \"-\" + hour.toString() + minuteUpper.toString();\n          return currentTime;\n        } else if (minute>45 && minute<=59){\n          var minuteLower = 46;\n          var minuteUpper = 59;\n          var currentTime = hour.toString() + minuteLower.toString() + \"-\" + hour.toString() + minuteUpper.toString();\n          return currentTime;\n        }\n  }\n  return {\n    getTime: function timeData(){\n      return getTimeConverter();\n\n    }\n  }\n}]);\n\nmainApp.factory('busyFinder', ['jsonQueryStations', 'timeConverter', function(jsonQueryStations, timeConverter){\n  var stationResult = {};\n  return {\n    generator: function(){\n    var stationResult = jsonQueryStations.stationData().then(function(result){\n    var findthetime = timeConverter.getTime();\n    var Average = \"Average\";\n    console.log(result);\n    console.log(\"Current local time: \" + findthetime);\n    console.log(\"Station selected: \" + result.station.Station);\n    console.log(\"Passenger count at the station: \" + result.station[findthetime]);\n    console.log(\"Average passenger count: \" + result.station.Average)\n    var actualLevel = result.station[findthetime];\n    var averageLevel = result.station.Average;\n    var stationSelected = result.station.Station;\n    var currentLevel = \"currentLevel\";\n    function whatToDoNow(){\n    var whatToDo = \"\";\n     if (actualLevel>averageLevel){\n      return whatToDo = \"pub\";\n    } else{\n      return whatToDo = \"home\";\n    }\n    }\n    whatToDo = whatToDoNow();\n    stationResult[currentLevel] = result.station[findthetime];\n    stationResult[averageLevel] = averageLevel;\n    stationResult[stationSelected] = stationSelected;\n    stationResult[whatToDo] = whatToDo;\n    console.log(stationResult);\n  });\n    return {\n      stationResult: stationResult\n      }\n  }\n};\n}])\n\n\nmainApp.controller('stuff', ['$scope', 'busyFinder', function($scope, busyFinder){\n var dataResult = busyFinder.generator();\n console.log(dataResult);\n var whatNow = dataResult.stationResult.waterloo;\n $scope.testing = whatNow;\n}]);\n",
			"file": "scripts/controller.js",
			"file_size": 3575,
			"file_write_time": 131341562600357763,
			"settings":
			{
				"buffer_size": 3575,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jean/Desktop/MilltagHome/milltag/public_html/site/media/uploads/maxmegamenu/style.css",
			"settings":
			{
				"buffer_size": 26827,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "mainApp.factory('busyFinder', ['$scope', 'jsonQueryStations', 'timeConverter', function($scope,jsonQueryStations, timeConverter){\n  var generator = function generateResponse(){\n  $scope.stationResult = jsonQueryStations.stationData().then(function(result){\n    var findthetime = timeConverter.getTime();\n    var Average = \"Average\";\n    console.log(\"Current local time: \" + findthetime);\n    console.log(\"Station selected: \" + result.station.Station);\n    console.log(\"Passenger count at the station: \" + result.station[findthetime]);\n    console.log(\"Average passenger count: \" + result.station.Average)\n    var actualLevel = result.station[findthetime];\n    var averageLevel = result.station.Average;\n    $scope.stationSelected = result.station.Station;\n    $scope.currentTraffic = \"this is the current passenger count: \" + actualLevel;\n    $scope.averageTraffic = \"this is the average passenger count: \" + averageLevel;\n    var whatToDo = \"\";\n     if (actualLevel>averageLevel){\n      return $scope.whatToDo = \"Go to the pub\";\n    } else{\n      return $scope.whatToDo = \"Go home\";\n    }\n    return $scope.whatToDo = whatToDo;\n  });\n  }\n  return {\n    generate: function generateIt(){\n      return generator();\n    }\n  }\n}])",
			"file": "scripts/factory.js",
			"file_size": 0,
			"file_write_time": 131338129182293062,
			"settings":
			{
				"buffer_size": 1226,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jean/projects/beerortube/beer.js",
			"settings":
			{
				"buffer_size": 318,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 372.0,
		"last_filter": "Package Control: in",
		"selected_items":
		[
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 530.0
	},
	"console":
	{
		"height": 340.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/jean/projects/pubtube",
		"/home/jean/projects/pubtube/css",
		"/home/jean/projects/pubtube/data",
		"/home/jean/projects/pubtube/scripts"
	],
	"file_history":
	[
		"/home/jean/Desktop/MilltagHome/dbadmin/public_html/js/normalization.js",
		"/home/jean/projects/pubtube/stationList.json",
		"/home/jean/projects/pubtube/tubeUsers.json",
		"/home/jean/projects/beerortube/index.html",
		"/home/jean/projects/beerortube/scripts/controller.js",
		"/home/jean/projects/beerortube/beer.js",
		"/home/jean/projects/beerortube/package.json",
		"/home/jean/projects/beerortube/TODO.ms",
		"/home/jean/projects/beerortube/scripts/ngGeolocation.min.js",
		"/home/jean/projects/beerortube/controller.js",
		"/home/jean/projects/beerortube/node_modules/beer.js",
		"/home/jean/projects/mongoTest/test/blogapp.js",
		"/home/jean/projects/mongoTest/test/index.html",
		"/home/jean/projects/mongoTest/test/server.js",
		"/home/jean/projects/mongoTest/test/blog/blogpost.json",
		"/home/jean/Desktop/angular/node/app/controller/controller.js",
		"/home/jean/Desktop/angular/node/app/index.html",
		"/home/jean/Desktop/angular/node/app/app.js",
		"/home/jean/Desktop/angular/helloWorld/app.js",
		"/home/jean/Desktop/angular/helloWorld/index.html",
		"/home/jean/Desktop/angular/helloWorld/controller.js",
		"/home/jean/Desktop/angular/weather/style.css",
		"/home/jean/Desktop/angular/weather/index.html",
		"/home/jean/Desktop/angular/weather/greeting.html",
		"/home/jean/Desktop/angular/weather/controller.js",
		"/home/jean/Desktop/angular/weather/service.js",
		"/home/jean/Desktop/angular/weather/app.js",
		"/home/jean/Desktop/angular/weather/untitled",
		"/home/jean/Desktop/angular/app.js",
		"/home/jean/Desktop/angular/controller.js",
		"/home/jean/Desktop/angular/style.css",
		"/home/jean/Desktop/angular/greeting.html",
		"/home/jean/Desktop/angular/index.html",
		"/home/jean/.config/sublime-text-3/Packages/TypeScript/Preferences.sublime-settings",
		"/home/jean/Desktop/FreeCodeCamp/WeatherAngular/weatherAngular/weather/index.html",
		"/home/jean/Desktop/FreeCodeCamp/WeatherAngular/weatherAngular/weather/findme.html",
		"/home/jean/Desktop/FreeCodeCamp/WeatherAngular/weatherAngular/weather/mainController.js",
		"/home/jean/Desktop/FreeCodeCamp/WeatherAngular/weatherAngular/index.html",
		"/home/jean/Desktop/FreeCodeCamp/WeatherAngular/weatherAngular/controllers/mainController.js",
		"/home/jean/Desktop/FreeCodeCamp/WeatherAngular/main.js",
		"/home/jean/Desktop/FreeCodeCamp/WeatherAngular/index.html",
		"/angular.js",
		"/home/jean/Desktop/label/webplatform-samples/webspeechdemo/webspeechdemo.html",
		"/home/jean/thinker/app.js",
		"/home/jean/thinker/index.html",
		"/home/jean/Desktop/Crud/index.html",
		"/home/jean/Desktop/tris.py",
		"/home/jean/Desktop/Crud/server.js",
		"/home/jean/Desktop/railsbridge/test_app/Gemfile",
		"/home/jean/Desktop/railsbridge/test_app/config/routes.rb",
		"/home/jean/Desktop/FreeCodeCamp/QuoteMachine/css.css",
		"/home/jean/Desktop/FreeCodeCamp/QuoteMachine/stuff.js",
		"/home/jean/Desktop/FreeCodeCamp/QuoteMachine/javascript.js",
		"/home/jean/Desktop/FreeCodeCamp/QuoteMachine/index.html",
		"/home/jean/Desktop/trydjango19/SRC/trydjango19/urls.py",
		"/home/jean/Desktop/trydjango19/SRC/posts/forms.py",
		"/home/jean/Desktop/trydjango19/SRC/posts/urls.py",
		"/home/jean/Desktop/trydjango19/SRC/templates/index.html",
		"/home/jean/Desktop/trydjango19/SRC/posts/models.py",
		"/home/jean/Desktop/trydjango19/SRC/templates/post_detail.html",
		"/home/jean/Desktop/trydjango19/SRC/templates/post_form.html",
		"/home/jean/Desktop/trydjango19/SRC/posts/views.py",
		"/home/jean/Desktop/trydjango19/SRC/trydjango19/settings.py",
		"/home/jean/Desktop/trydjango19/SRC/crud.md",
		"/home/jean/Desktop/trydjango19/SRC/posts/admin.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"FFFFFF",
			"myApp",
			"well"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"weatherApp",
			"well-sm"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/home/jean/projects/pubtube"
		}
	],
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 436,
						"regions":
						{
						},
						"selection":
						[
							[
								164,
								164
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 768,
						"regions":
						{
						},
						"selection":
						[
							[
								751,
								751
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "css/stylez.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 83,
						"regions":
						{
						},
						"selection":
						[
							[
								34,
								34
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "scripts/controller.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3575,
						"regions":
						{
						},
						"selection":
						[
							[
								3029,
								3029
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/jean/Desktop/MilltagHome/milltag/public_html/site/media/uploads/maxmegamenu/style.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26827,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 10086.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "scripts/factory.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1226,
						"regions":
						{
						},
						"selection":
						[
							[
								1226,
								1226
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/jean/projects/beerortube/beer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 318,
						"regions":
						{
						},
						"selection":
						[
							[
								116,
								116
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/TypeScript/TypeScript.sublime-build",
	"project": "",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 282.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
